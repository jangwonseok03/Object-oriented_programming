객체지향 프로그래밍 13주차

*스트림
데이터의 흐름, 혹은 데이터를 전송하는 소프트웨어 모듈이다. 여기서 C++ 스트림 종류에는 입력 스트림, 출력 스트림이 있다.
입력 스트림: 입력장치, 네트워크, 파일로부터 데이터를 프로그램으로 전달하는 스트림이다.
출력 스트림: 프로그램에서 출력되는 데이터를 출력장치, 네트워크, 파일로 전달하는 스트림이다.

*C++ 입출력 스트림 버퍼
- 키 입력 스트림 버퍼
목적:
입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장해줘서 키 입력 도중에 수정(Backspace키를 이용)이 가능하도록 하기 
위해 버퍼를 가진다.
- 스크린 출력 스트림 버퍼
목적:
프로그램에서 출력된 데이터를 출력 장치로 보내기 전에 일시 저장을 해줌으로써 출력 장치를 반복적으로 사용하는 비효율성을 개선하기 위해
버퍼를 가진다. (버퍼가 가득 차거나 강제 출력 명령을 받았을 때 출력 장치에 출력)

*스트림 입출력 방식(stream I/O)
- 스트림 버퍼를 이용하는 입출력 방식이다.
- 입력된 키는 버퍼에 저장한다.(Enter키가 입력됐을 때 프로그램이 버퍼를 읽어가는 방식)
- 출력되는 데이터는 일차적으로 스트림 버퍼에 저장된다.

*저수준 입출력 방식(raw level console I/O)
- 키가 입력되는 즉시 프로그램에게 키 값을 전달한다.
- 프로그램이 출력하는 즉시 출력 장치에 출력한다.
- 컴파일러마다 다른 라이브러리나 API를 지원한다.(C++ 프로그램의 호완성이 낮다.)
위에 두개의 입출력 방식중에 C++표준은 스트림 입출력 방식만을 지원한다.(높은 호환성)

*C++ 표준 입출력 스트림 객체
cin:
istream 타입의 스트림 객체로서 키보드 장치와 연결

cout:
ostream 타입의 스트림 객체로서 스크린 장치와 연결

cerr:
ostream 타입의 스트림 객체로서 스크린 장치와 연결
오류 메시지를 출력할 목적
스트림 내부 버퍼 거치지 않고 출력

clog:
ostream 타입의 스트림 객체로서 스크린 장치와 연결
오류 메시지를 출력할 목적
스트림 내부에 버퍼 거쳐 출력

*포맷 입출력 방법 3가지
1. 포맷 플래그
- 입출력 스트림에서 입출력 형식을 지정하기 위한 플래그
2. 포맷 함수
3. 조작자
조작자는 함수:
- C++ 표준 라이브러리에 구현된 조작자 : 입출력 포맷 지정 목적
- 개발자 만의 조작자 작성 가능 : 다양한 목적
- 매개 변수 없는 조작자와 매개 변수를 가진 조작자로 구분
조작자는 항상 << 나 >> 연산자와 함께 사용된다.
ex) 매개 변수 없는 조작자                      결과:
cout << hex << showbase << 30 << endl;        0x1e 
cout << dec << showpos << 100 << endl;        +100

매개 변수 있는 조작자
- #include <iomanip> 필요                                  결과:
cout << setw(10) << setfill('^') << "Hello" << endl;       ^^^^^Hello

*****페어 활동*****
-예제 11-9
조원과 같이 예제 11-9를 실습을 해보고 서로 얘기를 해본 결과 예제 11-9를 안보고 코드를 짜보는 것에서 큰 어려움을 느끼지는 않았다.
예제 11-9에서 코드를 짜는데 중요한 키포인트는 private 필드 x, y를 접근하기 위해 Point a 함수를 Point 클래스에 friend로 선언하는 것이
중요한 키포인트인 것 같다고 얘기가 나왔다.
