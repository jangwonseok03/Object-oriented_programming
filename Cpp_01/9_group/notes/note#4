(1) Power & ret_this() {
  return*this;
}
이 함수는 Power 형식의 객체에 대한 참조를 반환한다. 함수 이름은 ret_this이고, 객체 자신을 가리키는 포인터(this)를 참조로 반환한다.

(2) Power ret_This() {
  return*this;
}
이 함수는 Power 형식의 객체를 반환한다. 함수 이름은 ret_This이며, 객체 자신을 가리키는 포인터(this)를 반환한다. 반환 형식이 객체 자체인 차이점이 있다.

(3) Power & ret_This() {
  return this;
}
이 함수는 Power 형식의 객체에 대한 참조를 반환하려고 시도하지만, this 포인터가 객체 자신을 가리키므로 컴파일 오류를 발생시킨다 그래서 함수의 반환 형식이 참조인 것은 올바르지만 this 포인터의 사용이 잘못되었다. 따라서 올바르지 않다.

(4) Power * ret_This() {
return this;
}
이 함수는 Power 형식의 포인터를 반환한다. 함수 이름은 ret_This이며, 객체 자신을 가리키는 포인터(this)를 반환한다.

(5) Power ret_This() {
  return this;
}
이 함수는 Power 형식의 객체를 반환하려고 시도하지만, this 포인터가 객체 자신을 가리키므로 컴파일 오류를 발생시킨다 그래서 반환 형식이 객체인 것은 올바르지만 this 포인터의 사용이 잘못되었다. 따라서 올바르지 않다.

예제 7-1 
예제 7-1을 코드를 안보고 작성을 해보았는데 friend 함수를 통해서 선언하는 부분은 구현을 하였는데 this를 통해서 width와 height를 쓰는 곳(this->width = width; this->height = height;)을 작성하는데 어려움이 있었고 
다음으로는 외부함수를 구현하는 부분에서 if안에 어떠한 조건문이 들어가야하는지 모르겠어서 if(r.width == s.width && r.height == s.height) 이 부분을 작성하는데 어려움을 겪었다.

예제 7-2
예제 7-2를 코드 작성하는데에는 예제 7-1을 해봤기 때문에 큰 어려움 없이 작성을 할 수 있었다.

예제 7-3 
예제 7-3 코드를 작성 할 때에 friend RectManager;를 통해 RectManager 클래스를 friend 함수로 선언하는 부분을 구현하는 것을 까먹고 작성하였고 그 부분을 나중에 코드를 다 작성하고 알고 고쳤다. 다음으로 man.copy를 통해 a를 b에 복사해야
하는 부분도 작성하지 않아서 안보고 코드를 다 작성한 후에 고쳐주었다.

예제 7-4 
예제 7-4는 거의 대부분 작성을 하는데 어려워서 코드를 많이 보고 작성하였다.

예제 7-8
이 코드를 작성할 때 전위 ++ 연산자 멤버 함수 구현하는 부분에서 어려움을 겪었고 return *this;를 통해서 변경된 객체 자신의 참조를 리턴해야하는 것이 가장 어려웠다. 다른 부분에서는 크게 어려움을 겪은 부분은 없었다.
