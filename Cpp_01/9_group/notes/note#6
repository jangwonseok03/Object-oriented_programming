예제 9-1 
예제 9-1을 안보고 코드 작성을 해보았는데 예제 9-1을 구현하는데는 문제 없이 구현을 하였다.

가상함수:
virtual 키워드로 선언된 멤버 함수를 말하고 여기서 virtual의 의미는 컴파일러에게 함수에 대한 호출 바인딩을 실행시간까지 미루도록
지시하는 역할을 한다.

함수 오버라이딩:
파생 클래스에서 기본 클래스의 가상 함수와 동일한 이름의 함수를 선언하는 역할을 한다. 또한 함수 오버라이딩은 기본 클래스의 가상 함수의
존재감을 상실시키고 파생 클래스에서 오버라이딩을 한 함수가 호출되도록 동적 바인딩을 한다.

예제 9-2
예제 9-1에서 virtual을 사용해 가상 함수 선언만 해주면 되는 것이기 때문에 간단하게 해결하였다.

동적 바인딩:
파생 클래스에 대해 기본 클래스에 대한 포인터로 가상 함수를 호출하는 경우에 객체 내에 오버라이딩한 파생 클래스의 함수를 찾아 실행하는
것을 동적 바인딩이라고 부른다.

이 동적 바인딩에 대한 설명을 듣고 팀원과 정적 바인딩과 동적 바인딩에는 어떤 차이점이 있는지에 대해 얘기해본 결과
정적 바인딩은 실행 이전에 값이 확정되고 동적 바인딩은 실행 이후에 값이 확정된다는 차이점이 있다는 것을 알게 되었다. 조금 더 자세히
얘기하자면 정적 바인딩은 컴파일 타임에 호출될 함수가 결정되는 것이고 동적 바인딩은 런타임에 호출될 함수가 결정되는 차이점이 있는 것이다.
