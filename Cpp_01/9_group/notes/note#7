12주차 객체지향 프로그래밍

-제네릭 또는 일반화
함수나 클래스를 일반화시키고, 매개 변수 타입을 지정하여 틀에서 찍어 내듯이 함수나 클래스 코드를 생산하는 기법을 말한다.

-템플릿
함수나 클래스를 일반화하는 C++ 도구이고 template 키워드로 함수나 클래스 선언을 할 수 있다. 
ex) template <class T> 또는 template <typename T>

-구체화
템플릿의 제네릭 타입에 구체적인 타입을 지정하는 것을 말한다.
ex) 
template <class T>                              void myswap(int & a, int & b {
  void myswap(T & a, T & b) {     -->             int tmp;
    T tmp;                                        ...
    ...                                         } 
}
T부분이 알맞은 구체적인 타입으로 지정되는 것이다. (여기서 구체화는 컴퓨터가 해준다.)

-페어활동을 통해 나온 이야기
◼템플릿은 언제 사용하는 것일까?
위 주제에 대해 얘기 해본 결과 템플릿은 함수에서 매개변수(int, double등)만 빼고 코드가 동일 할 때 사용하는 것 같다고 생각하게 되었다.

◼템플릿은 왜 사용하는 것일까?
위 주제에 대해 서로 얘기해본 결과 템플릿을 사용하는 이유는 함수가 중복되는 것을 막아서 코드를 조금이라도 더 간결하게 짜서 코드를 
효율적으로 만들기 위해서 사용하는 것 같다고 서로 생각하게 되었다.

-STL
표준 템플릿 라이브러리이고 많은 제네릭 클래스와 제네릭 함수를 포함한다.
STL의 구성은 컨테이너, iterator, 알고리즘으로 구성되어있다.

컨테이너 – 템플릿 클래스
데이터를 담아두는 자료 구조를 표현한 클래스이고 리스트, 큐, 스택, 맵, 셋, 벡터와 같은 것들이 있다.

iterator – 컨테이너 원소에 대한 포인터
컨테이너의 원소들을 순회하면서 접근하기 위해 만들어진 컨테이너 원소이다.
에 대한 포인터

알고리즘 – 템플릿 함수
컨테이너 원소에 대한 복사, 검색, 삭제, 정렬 등의 기능을 구현한 템플릿 함수이다.
